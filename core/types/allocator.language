/*
The std::allocator class template is the default Allocator used by all standard library containers if no user-specified allocator is provided. The default allocator is stateless, that is, all instances of the given allocator are interchangeable, compare equal and can deallocate memory allocated by any other instance of the same allocator type.
*/

package allocators

/*
Defines allocation/deallocation functions.
*/
type allocator<$t> = interface {
	// XXX REVIEW this is fun to parse ?! even possible!?
	// function () return type name <-- so strange!
	
	/*
	Allocates uninitialized continuos memory of given size

	Remarks:
		allocation has accesss to the type that it's going to be allocated
		* enables Region-based memory management based on types.
		* enables stub returing, while possible to allocate more memory it will exceed your memory bound.
	*/	
	function alloca (size s) lend uninitialized ref<$t>

	/*
	Allocates continuos memory of given size initialized to zero
	
	Type system should test if the memory requires to be initialized based on the $t
	$t is primitive, zero is valid
	$t is struct, zero is invalid, force to call constructor before use
	*/
	function calloca (size s) lend ref<$t>

	/*
	Deallocates memory

	Remarks:
		Eats memory because it doesn't lend anything!
	*/
	function dealloca (own ref<$t> ptr) void


	// EXPERIMENTAL
	/*
	Allocates aligned uninitialized continuos memory of given size
	*/
	// function aalloca (size s, size alignament) lend uninitialized ref<$t>

}

type allocable = interface {
	allocator _allocator = null
}
/*
It's the default allocator.
*/
const global allocator<i8> global_allocator = {
	function (size s) lend uninitialized ref<i8> {
		return libc.malloc(s)
	},
	// function (size s, size alignament) lend uninitialized ref<i8> {
	// 	return libc.malloc(s) // TODO
	// },
	function (size s) lend uninitialized ref<i8> {
		return libc.calloc(s)
	},
	function (own ref<i8> ptr) void {
		libc.free(ptr)
	}
}
/*
Holds the current default allocator.

When a core function needs to allocate memory and no allocator is sent, the default_allocator will be used.
*/
global allocator<i8> default_allocator = global_allocator
